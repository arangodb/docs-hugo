version: 2.1

commands:
  clone-arangodb:
    description: "Clone ArangoDB Branch and Enterprise Branch"
    parameters:
      branch:
        type: string
        default: ""
      version:
        type: string
        default: ""
    steps:
      - run:
          name: Clone ArangoDB and Enterprise
          command: |
            branch_name=<< parameters.branch >>

            echo "[SETUP] Setup server << parameters.branch >>"

            if [[ "<< parameters.branch >>" == *"arangodb/enterprise"* ]]; then
                echo "[SETUP] An official ArangoDB Enterprise image has been chosen"
                branch_name=$(echo << parameters.branch >> | cut -d: -f2 | cut -d- -f1)
            fi

            echo "[SETUP] Git clone $branch_name"

            git clone --depth 1 https://github.com/arangodb/arangodb.git --branch $branch_name /root/project

            ENTERPRISE_BRANCH="devel"
            set +e
            git ls-remote --exit-code --heads git@github.com:arangodb/enterprise.git $branch_name
            if [ "$?" == "0" ] ; then
                ENTERPRISE_BRANCH=$branch_name
            fi
            set -e
            echo "Using enterprise branch $ENTERPRISE_BRANCH"
            git clone --depth 1 git@github.com:arangodb/enterprise.git --branch "$ENTERPRISE_BRANCH" /root/project/enterprise

            mkdir -p /tmp/<< parameters.version >>
            cp -r /root/project/. /tmp/<< parameters.version >>

  check-arangodb-image-exists:
    description: "Check ArangoDB branch docker image exists"
    parameters:
      branch:
        type: string
        default: ""
      version:
        type: string
        default: ""
    steps:
      - run:
          name: Check Branch Image already exists
          command: |
            apk add skopeo

            image_name=$(echo << parameters.branch >> | cut -d/ -f2)
            latestRemoteHash=$(git ls-remote https://github.com/arangodb/arangodb.git << parameters.branch >> | awk '{print $1}' | cut -c1-9)

            set +e
            skopeo inspect docker://"arangodb/docs-hugo:$image_name-<< parameters.version >>-$latestRemoteHash" 
            if [ "$?" != "0" ]; then
              exit 0
            fi 
            circleci-agent step halt
            
  compile-and-dockerize-arangodb:
    description: "Compile and create docker image of ArangoDB Branch"
    parameters:
      branch:
        type: string
        default: ""
      version:
        type: string
        default: ""
    steps:
      - run:
          name: Print SCCache Settings
          command: sccache -s
      - run:
          name: Configure
          command: |
            set +e
            cmake --preset enterprise-pr -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib
            if [ "$?" != "0" ]; then
              echo "<strong>ArangoDB Compile Error</strong><br><br> Please check CircleCI Logs" | curl -X POST -d@- https://candid-daffodil-f96315.netlify.app/.netlify/functions/circleci --header 'docs-webhook-event: create-summary' --header 'docs-branch-sha: '$CIRCLE_SHA1'' --header 'docs-branch-name: '$CIRCLE_BRANCH''
              exit 1
            fi 
            set -e
      - run:
          name: Build
          command: |
            set +e
            cmake --build --preset enterprise-pr --parallel 8 --target arangodbtests arangod arangosh arangoimport arangoexport arangodump arangorestore arangobench fuertetest arangobackup arangovpack

            if [ "$?" != "0" ]; then
              echo "**ArangoDB Compile Error**<br><br> Please check CircleCI Logs" | curl -X POST -d@- https://candid-daffodil-f96315.netlify.app/.netlify/functions/circleci --header 'docs-webhook-event: create-summary' --header 'docs-branch-sha: '$CIRCLE_SHA1'' --header 'docs-branch-name: '$CIRCLE_BRANCH''
              exit 1
            fi 
            set -e
      - run:
          name: Size leaderboard
          command: |
            ls -Ssha build/bin/*.a
      - run:
          name: Cleanup build directory
          command: |
            find build/ -iname *.a -delete || true
            find build/ -iname *.o -delete || true
      - run:
          name: SCCache Statistics
          command: sccache -s
      - run:
          name: Create archive of compiled instance
          command: |
            wget -O build/bin/arangodb https://github.com/arangodb-helper/arangodb/releases/download/0.15.8/arangodb-linux-amd64
            chmod +x build/bin/arangodb
            tar -czf install.tar.gz build/ scripts/ js/ etc/ utils/ enterprise/
      - run:
          name: Create docker image
          command: |
            mkdir -p create-docker/

            curl "https://raw.githubusercontent.com/arangodb/docs-hugo/$CIRCLE_BRANCH/toolchain/scripts/compile/tar-to-docker.Dockerfile" > create-docker/tar-to-docker.Dockerfile
            curl "https://raw.githubusercontent.com/arangodb/docs-hugo/$CIRCLE_BRANCH/toolchain/scripts/compile/setup-tar-to-docker.sh" > create-docker/setup-tar-to-docker.sh
            curl "https://raw.githubusercontent.com/arangodb/docs-hugo/$CIRCLE_BRANCH/toolchain/scripts/compile/docker-entrypoint.sh" > create-docker/docker-entrypoint.sh

            mv install.tar.gz create-docker/

            main_hash=$(awk 'END{print}' .git/logs/HEAD | awk '{print $2}' | cut -c1-9)
            image_name=$(echo << parameters.branch >> | cut -d/ -f2)

            cd create-docker
            chmod +x setup-tar-to-docker.sh
            chmod +x docker-entrypoint.sh

            apk add docker-cli
            
            docker build -t arangodb/docs-hugo:$image_name-<< parameters.version >>-$main_hash --target arangodb-tar-starter -f tar-to-docker.Dockerfile .

            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker push arangodb/docs-hugo:$image_name-<< parameters.version >>-$main_hash

  launch-toolchain:
    description: "launch toolchain (extended by dynamic config)"
    parameters:
      generators:
        type: string
        default: ""
    steps:
      - run:
          name: Launch toolchain
          command: ""

  store-generated-data:
    description: "Save generated data as artifacts"
    steps:
      - run:
          name: Archive generated data
          command: exit 0

  download-generated-data:
    description: "Download generated data of a previous generate run"
    steps:
      - run:
          name: Download generated data
          command: |
            curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
            source ~/.bashrc   
            nvm install --lts 

            artifacts_job_id=$(node docs-hugo/.circleci/commit.js $CIRCLE_BRANCH)
            base_url=https://output.circle-artifacts.com/output/job/"$artifacts_job_id"/artifacts/0/tmp

  upload-summary:
    description: "Upload summary report on github"
    parameters:
      summary-name:
        type: string
        default: ""
      branch:
        type: string
        default: $CIRCLE_BRANCH
    steps:
      - run:
          name: Upload summary on GitHub
          command: |
            cd /home/circleci/project/docs-hugo
            
            cat summary.md | curl -X POST -d@- https://candid-daffodil-f96315.netlify.app/.netlify/functions/circleci --header 'docs-webhook-event: create-summary' --header 'docs-branch-sha: '$CIRCLE_SHA1'' --header 'docs-check-name: << parameters.summary-name >>'  --header 'docs-branch-name: '<< parameters.branch >>''
          when: always

  update-arangodb-release-version:
    description: "Update arangodb release version in docs versions.yaml"
    parameters:
      docs-version:
        type: string
        default: ""
      arangodb-version:
        type: string
        default: ""
    steps:
      - run:
          name: Update ArangoDB Release Version
          command: |
            sed -i 's/version.*'<< parameters.docs-version >>'.*/version: "'<< parameters.arangodb-version >>'"/g' docs-hugo/site/data/versions.yaml


  clone-docs-and-merge:
    description: Clone docs and merge main content before generate
    steps:
      - run: 
          name: Clone docs repo
          command: |
           git clone git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH
           cd docs-hugo/
           git fetch --all
           git pull --all
           git merge --no-edit -X theirs origin/main
           cd ../

  commit:
    description: Commit generated content
    parameters:
      create-pr:
        type: boolean
        default: false
      pr-branch:
        type: string
        default: ""
    steps:
      - run:
          name: Commit generated files
          command: |
              if [ "<< parameters.create-pr >>" = true ]; then
                cd docs-hugo/
                git checkout -b << parameters.pr-branch >>-$CIRCLE_BUILD_NUM
              fi

              cd /home/circleci/project/docs-hugo/site
              git config user.email "daniele@arangodb.com"
              git config user.name "CircleCI Job"
              git add data/ content/
              git commit --allow-empty -m "[skip ci] Automatic commit of generated files from CircleCI"

              if [ "<< parameters.create-pr >>" = true ]; then
                git push -u origin << parameters.pr-branch >>-$CIRCLE_BUILD_NUM
                curl -X POST https://candid-daffodil-f96315.netlify.app/.netlify/functions/circleci \
                  --header 'docs-webhook-event: scheduled-create-pr' \
                  --header "docs-branch-name: << parameters.pr-branch >>-$CIRCLE_BUILD_NUM" \
                  --header "docs-pr-title: [CircleCI Generated] << parameters.pr-branch >>-$CIRCLE_BUILD_NUM" \
                  --header "docs-pr-body: Automatically generated content from CircleCI << pipeline.parameters.workflow >> workflow"
              else
                git push
              fi

  commit-api-docs:
    description: Commit api-docs files to api-docs repository
    parameters:
      version:
        type: string
        default: ""
      tag:
        type: string
        default: ""
    steps:
      - run:
          name: Clone api-docs repo
          command: |
            git clone git@github.com:arangodb/api-docs.git
            cd /home/circleci/project/api-docs
            cp /home/circleci/project/docs-hugo/site/data/<< parameters.version >>/api-docs.json /home/circleci/project/api-docs/
            git commit --allow-empty -m 'Commit api-docs << parameters.tag >>' api-docs.json
            git tag -f << parameters.tag >>
            git push -f origin << parameters.tag >>
            git push -f

jobs:
  create-docs-images:
    parameters:
      architecture:
        type: string
        default: "amd64"
      executor:
        type: string
        default: "medium"
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:current
      resource_class: << parameters.executor >>
    steps:
      - run: 
          name: Clone docs repo
          command: |
            git clone --depth 1 https://github.com/arangodb/docs-hugo.git --branch $CIRCLE_BRANCH
      - run: 
          name: Create docker images
          command: |
            cd docs-hugo/toolchain/docker
            export DOCKER_BUILDKIT=1
            docker build -t arangodb/docs-hugo:site-<< parameters.architecture >> --target hugo .
            docker build -t arangodb/docs-hugo:arangoproxy-<< parameters.architecture >> --target arangoproxy .
            docker build -t arangodb/docs-hugo:toolchain-<< parameters.architecture >> --target toolchain .

      - run: 
          name: Push docker images
          command: |
            cd docs-hugo/toolchain/docker
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin

            docker push arangodb/docs-hugo:site-<< parameters.architecture >>
            docker push arangodb/docs-hugo:arangoproxy-<< parameters.architecture >>
            docker push arangodb/docs-hugo:toolchain-<< parameters.architecture >>


  plain-build:
    parameters:
      branch:
        type: string
        default: $CIRCLE_BRANCH
      url:
        type: string
        default: "https://<< pipeline.parameters.deploy-url >>--docs-hugo.netlify.app"
    machine:
      image: ubuntu-2004:current
    resource_class: large
    environment:
      GIT_SSH_COMMAND: "ssh -o IdentitiesOnly=yes"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1e:e3:7e:8c:55:be:3d:56:bc:4c:1c:d7:d6:26:f2:e5"
            - "20:72:b8:99:35:4c:7c:23:60:da:f2:5e:43:34:ba:79"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts

      - run: 
          name: Clone docs repo
          command: |
            git clone --depth 1 git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH

      - run:
          name: Build site
          command: |
            export ENV="circleci"
            export HUGO_URL=<< parameters.url >>
            export HUGO_ENV=frontend

            cd docs-hugo/toolchain/docker/amd64
            docker compose -f docker-compose.plain-build.yml up --abort-on-container-exit
      - upload-summary:
          summary-name: "plain-build-summary"
      - when:
          condition:
            equal: [ "api-docs", << pipeline.parameters.workflow >> ]
          steps:
            - commit-api-docs:
                version: << pipeline.parameters.version >>
                tag: << pipeline.parameters.tag >>

      - persist_to_workspace:
          root: .
          paths:
            - docs-hugo/site/public



  build-with-generated:
    parameters:
      generators:
        type: string
        default: examples
      commit-generated:
        type: boolean
        default: false
      create-pr:
        type: boolean
        default: false
      pr-branch:
        type: string
        default: ""
    machine:
      image: ubuntu-2004:current
    resource_class: xlarge
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - attach_workspace:
          at: .
      
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
      - clone-docs-and-merge
      - when:
          condition:
            equal: [ "release", << pipeline.parameters.workflow >> ]
          steps:
            - update-arangodb-release-version:
                docs-version: << pipeline.parameters.docs-version >>
                arangodb-version: << pipeline.parameters.arangodb-version >>
      - launch-toolchain:
          generators: << parameters.generators >>
      - upload-summary:
          summary-name: "generate-summary"
      - store-generated-data
      - when:
          condition:
            equal: [ true, << parameters.commit-generated >> ]
          steps:
            - commit:
                create-pr: << parameters.create-pr >>
                pr-branch: << parameters.pr-branch >>

      
      - persist_to_workspace:
          root: .
          paths:
            - docs-hugo/site/public

  commit-generated:
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - clone-docs-and-merge
      - download-generated-data
      - commit:
          create-pr: false
          pr-branch: ""
            
  deploy:
    parameters:
      deploy-args:
        type: string
        default: "--alias << pipeline.parameters.deploy-url >>"
    docker:
      - image: williamjackson/netlify-cli
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Deploy to netlify
          command:  /home/node/docker-netlify-cli/node_modules/.bin/netlify deploy --dir=docs-hugo/site/public --site $NETLIFY_SITE_ID --auth $NETLIFY_ACCESS_TOKEN << parameters.deploy-args >>
          no_output_timeout: 1h


  compile-linux:
    description: "Compile Linux Job (extended by dynamic config)"
    parameters:
      arangodb-branch:
        type: string
        default: ""
      version:
        type: string
        default: ""
      openssl:
        type: string
        default: ""
    docker:
      - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl<< parameters.openssl >>
    resource_class: xlarge
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
      - clone-arangodb:
          branch: << parameters.arangodb-branch >>
          version: << parameters.version >>
      - persist_to_workspace:
          root: /tmp
          paths:
            - << parameters.version >>/*



      



workflows:
  create-docs-images-amd64:
    when: { equal: [ create-docs-images-amd64, << pipeline.parameters.workflow >> ] }
    jobs:
      - create-docs-images:
          architecture: "amd64"
          executor: "medium"
  create-docs-images-arm64:
    when: { equal: [ create-docs-images-arm64, << pipeline.parameters.workflow >> ] }
    jobs:
      - create-docs-images:
          architecture: "arm64"
          executor: "arm.medium"
  plain:
    when: { equal: [ plain-build, << pipeline.parameters.workflow >> ] }
    jobs:
      - plain-build
      - deploy:
          requires:
            - plain-build

  api-docs:
    when: { equal: [ api-docs, << pipeline.parameters.workflow >> ] }
    jobs:
      - plain-build

  release:
    when: { equal: [ release, << pipeline.parameters.workflow >> ] }
    jobs:
      - plain-build:
          url: https://docs.arangodb.com
      - deploy:
          deploy-args: "--prod"
          requires:
            - plain-build

  generate:
    when:
      matches: { pattern: "^generate.*", value: << pipeline.parameters.workflow >> }    
    jobs:
      - approve-workflow:
          type: approval

  commmit-generated:
    when: { equal: [ commit-generated, << pipeline.parameters.workflow >> ] }
    jobs:
      - approve-workflow:
          type: approval
      - commit-generated:
          requires:
            - approve-workflow
      
