compile-linux:
  parameters:
    arangodb-branch:
      type: string
      default: ""
    version:
      type: string
      default: ""
    openssl:
      type: string
      default: ""
  docker:
    - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl<< parameters.openssl >>
  resource_class: xlarge
  environment:
    GIT_SSH_COMMAND: ssh
    SCCACHE_ERROR_LOG: /tmp/sccache.log
    SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
  steps:
    - setup_remote_docker:
        version: 20.10.14
    - add_ssh_keys:
        fingerprints:
          - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
          - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
          - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
    - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
    - run:
        name: Clone ArangoDB and Enterprise
        command: |
          if [ "<< parameters.arangodb-branch >>" == "" ]; then
            circleci-agent step halt
            exit 0
          fi

          curl "https://raw.githubusercontent.com/arangodb/docs-hugo/${CIRCLE_BRANCH}/.circleci/utils.sh" > utils.sh
          source utils.sh

          rm -r /root/project/*
          clone-branch << parameters.arangodb-branch >> << parameters.version >>
    - persist_to_workspace:
        root: /tmp
        paths:
          - << parameters.version >>/*
    - run:
        name: Check Branch Image already exists
        command: |
          if [[ "<< parameters.arangodb-branch >>" == *"arangodb/enterprise"* ]]; then
            circleci-agent step halt
            exit 0
          fi

          apk add skopeo

          image_name=$(echo << parameters.arangodb-branch >> | cut -d/ -f2)
          latestRemoteHash=$(git ls-remote https://github.com/arangodb/arangodb.git << parameters.arangodb-branch >> | awk '{print $1}' | cut -c1-9)

          set +e
          skopeo inspect docker://"arangodb/docs-hugo:$image_name-<< parameters.version >>-$latestRemoteHash" 
          if [ "$?" != "0" ]; then
            exit 0
          fi 
          circleci-agent step halt

    - run:
        name: Print SCCache Settings
        command: sccache -s
    - run:
        name: Configure
        command: |
          set +e
          cmake --preset enterprise-pr -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib
          if [ "$?" != "0" ]; then
            echo "<strong>ArangoDB Compile Error</strong><br><br> Please check CircleCI Logs" | curl -X POST -d@- https://candid-daffodil-f96315.netlify.app/.netlify/functions/circleci --header 'docs-webhook-event: create-summary' --header 'docs-branch-sha: '$CIRCLE_SHA1'' --header 'docs-branch-name: '$CIRCLE_BRANCH''
            exit 1
          fi 
          set -e

    - run:
        name: Build
        command: |
          set +e
          cmake --build --preset enterprise-pr --parallel 8 --target arangodbtests arangod arangosh arangoimport arangoexport arangodump arangorestore arangobench fuertetest

          if [ "$?" != "0" ]; then
            echo "**ArangoDB Compile Error**<br><br> Please check CircleCI Logs" | curl -X POST -d@- https://candid-daffodil-f96315.netlify.app/.netlify/functions/circleci --header 'docs-webhook-event: create-summary' --header 'docs-branch-sha: '$CIRCLE_SHA1'' --header 'docs-branch-name: '$CIRCLE_BRANCH''
            exit 1
          fi 
          set -e
    - run:
        name: Size leaderboard
        command: |
          ls -Ssha build/bin/*.a
    - run:
        name: Cleanup build directory
        command: |
          find build/ -iname *.a -delete || true
          find build/ -iname *.o -delete || true
    - run:
        name: SCCache Statistics
        command: sccache -s
    - run:
        name: Create archive of compiled instance
        command: |
          wget -O build/bin/arangodb https://github.com/arangodb-helper/arangodb/releases/download/0.15.8/arangodb-linux-amd64
          chmod +x build/bin/arangodb
          tar -czf install.tar.gz build/ scripts/ js/ etc/ utils/ enterprise/
    - run:
        name: Create docker image
        command: |
          curl "https://raw.githubusercontent.com/arangodb/docs-hugo/${CIRCLE_BRANCH}/.circleci/utils.sh" > utils.sh
          source utils.sh
          create-docker-image << parameters.arangodb-branch >> << parameters.version >> $CIRCLE_BRANCH

  