version: 2.1

parameters:
  WORKFLOW:
    type: enum
    enum: [no-op, plain-build, generate, compile]
    default: no-op

  GENERATORS:
    type: string
    default: ""

  VERSION:
    type: string
    default: "3.10"

  ARANGODB_MAIN_BRANCH:
    type: string
    default: "devel"

  ARANGODB_ENTERPRISE_BRANCH:
    type: string
    default: "devel"

  ARANGODB_DOCS_OLD_BRANCH:
    type: string
    default: "main"

  ARANGODB_DOCS_NEW_BRANCH:
    type: string
    default: $CIRCLE_BRANCH

  ARANGODB_BRANCH:
    type: string
    default: "stable,arangodb/arangodb:latest,3.10,"

  ARANGODB_BRANCH_2:
    type: string
    default: ""

  ARANGODB_BRANCH_3:
    type: string
    default: ""
  
  commit-generated:
    type: boolean
    default: false

jobs:
  checkout: #Checkout a desired repository
    docker:
      - image: cimg/base:current
    resource_class: small
    parameters:
      repository:
        type: string
        default: docs-hugo
      branch:
        type: string
        default: main

    steps:
      - add_ssh_keys:
          fingerprints:
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts

      - run: mkdir -p workspace
      - run:
          name: Clone arangodb main repo
          command: |
            cd workspace && git clone --depth 1 << parameters.repository >> --branch << parameters.branch >>
      - run:
          name: check cloned folders
          command: |
            pwd && ls && cd workspace && ls
      - persist_to_workspace:
          root: .
          paths:
            - workspace

  migration: 
    docker:
      - image: cimg/python:3.11.2
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Download migration dependencies
          command: |
            pip install pyyaml python-frontmatter commonmark
      - run: 
          name: Migrate 3.10
          command: |
            cd workspace/docs-hugo/migration-tools/ && ./migration.sh migrate /home/circleci/project/workspace/docs /home/circleci/project/workspace/docs-hugo /home/circleci/project/workspace/arangodb 3.10
      - run: 
          name: Migrate 3.11
          command: |
            cd workspace/docs-hugo/migration-tools/ && ./migration.sh migrate /home/circleci/project/workspace/docs /home/circleci/project/workspace/docs-hugo /home/circleci/project/workspace/arangodb 3.11
      - persist_to_workspace:
          root: .
          paths:
            - workspace/docs-hugo
            - workspace/arangodb


  plain-build: 
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true 
    resource_class: medium
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Build site
          command: |
            export HUGO_ENV=prod
            export HUGO_URL=https://deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"--docs-hugo.netlify.app
            pwd && cd workspace/docs-hugo/toolchain/docker && docker compose -f docker-compose.plain-build.yml up --build
            
      - persist_to_workspace:
          root: .
          paths:
            - workspace/docs-hugo

  build-with-generated:
    parameters:
      generators:
        type: string
        default: examples
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true 
    resource_class: medium
    steps:
    
      - attach_workspace:
          at: .

      - add_ssh_keys:
          fingerprints:
            - "1e:e3:7e:8c:55:be:3d:56:bc:4c:1c:d7:d6:26:f2:e5"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts

      - run:
          name: Clone docs-hugo repo
          command: |
            cd workspace && git clone --depth 1 git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH

      - run:
          name: Clone arangodb branches
          command: |
            export IFS=","
            if [ "<< pipeline.parameters.ARANGODB_BRANCH >>" != "" ] ; then
              branch_name=$(env | grep ^ARANGODB_BRANCH= | cut -d= -f2 | cut -d, -f2)
              git clone --depth 1 https://github.com/arangodb/arangodb.git --branch $branch_name
            fi
            if [ "<< pipeline.parameters.ARANGODB_BRANCH_2 >>" != "" ] ; then
              branch_name=$(env | grep ^ARANGODB_BRANCH= | cut -d= -f2 | cut -d, -f2)
              git clone --depth 1 https://github.com/arangodb/arangodb.git --branch $branch_name
            fi
            if [ "<< pipeline.parameters.ARANGODB_BRANCH_3 >>" != "" ] ; then
              branch_name=$(env | grep ^ARANGODB_BRANCH= | cut -d= -f2 | cut -d, -f2)
              git clone --depth 1 https://github.com/arangodb/arangodb.git --branch $branch_name
            fi

      - run:
          name: Set environment variables and launch toolchain
          command: |
            export HUGO_URL=https://deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"--docs-hugo.netlify.app
            export DOCKER_ENV=examples
            export IFS=","
            if [ "<< pipeline.parameters.ARANGODB_BRANCH >>" != "" ] ; then
              branch_name=$(env | grep ^ARANGODB_BRANCH= | cut -d= -f2 | cut -d, -f2)
              export ARANGODB_BRANCH=<< pipeline.parameters.ARANGODB_BRANCH >>
              export ARANGODB_SRC=/root/project/workspace/$branch_name
            fi
            if [ "<< pipeline.parameters.ARANGODB_BRANCH_2 >>" != "" ] ; then
              branch_name=$(env | grep ^ARANGODB_BRANCH= | cut -d= -f2 | cut -d, -f2)
              export ARANGODB_BRANCH=<< pipeline.parameters.ARANGODB_BRANCH >>
              export ARANGODB_SRC_2=/root/project/workspace/$branch_name
            fi
            if [ "<< pipeline.parameters.ARANGODB_BRANCH_3 >>" != "" ] ; then
              branch_name=$(env | grep ^ARANGODB_BRANCH= | cut -d= -f2 | cut -d, -f2)
              export ARANGODB_BRANCH=<< pipeline.parameters.ARANGODB_BRANCH >>
              export ARANGODB_SRC_3=/root/project/workspace/$branch_name
            fi
            export GENERATORS=<< pipeline.parameters.GENERATORS >>
            cd workspace/docs-hugo/toolchain/docker && docker compose up
      
      - persist_to_workspace:
          root: .
          paths:
            - workspace/docs-hugo/site/public
            - workspace/docs-hugo/site/data

  commit-generated: 
    docker:
      - image: cimg/base:current
    resource_class: small
    
    steps:
      - attach_workspace:
          at: .
      - when:
          condition: << pipeline.parameters.commit-generated >>
          steps:
            - run:
                name: Commit cache file to github
                command: |
                  cd workspace/docs-hugo
                  git config user.email "daniele@arangodb.com"
                  git config user.name "CircleCI Job"
                  git commit --allow-empty -m "[ci skip] Automatic commit of generated files from CircleCI" site/data/
                  git push 

  deploy:
    docker:
      - image: cimg/node:19.7.0
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install netlify-cli
          command: sudo npm install -g --silent netlify-cli

      - run:
          name: Deploy to netlify
          command: netlify deploy --dir=workspace/docs-hugo/site/public --site $NETLIFY_SITE_ID --auth $NETLIFY_ACCESS_TOKEN --alias deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"

  show-deploy-preview:
    docker:
      - image: cimg/node:19.7.0
    resource_class: small
    steps:
      - run:
          name: Update Github check status message
          when: on_success
          command: |
            API=https://api.github.com
            USER=$CIRCLE_PROJECT_USERNAME
            REPO=$CIRCLE_PROJECT_REPONAME
            SHA=$CIRCLE_SHA1
            AUTH=dandimeo:$GITHUB_PAT
            URL=$API/repos/$USER/$REPO/statuses/$SHA
            DESCRIPTION=https://deploy-preview-${CIRCLE_PULL_REQUEST##*/}--docs-hugo.netlify.app
            echo "$DESCRIPTION"
            # Compose the body.
            BODY='
              {
                "state": "success",
                "target_url": "'"$CIRCLE_BUILD_URL"'",
                "description": "'"$DESCRIPTION"'",
                "context": "ci/circleci: deploy"
              }
            '
            # Post the status (use echo-pipe not \<<< for greater shell compat).
            echo $BODY | curl -u $AUTH -XPOST -d@- $URL
      
      

  compile-linux:
    docker:
      - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl1.1.1t
    resource_class: xlarge
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
      - run:
          name: Checkout ArangoDB
          command: |
            git clone --depth 1 https://github.com/arangodb/arangodb.git --branch << pipeline.parameters.ARANGODB_MAIN_BRANCH >> /root/project
      - run:
          name: Checkout Enterprise
          command: |
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              ENTERPRISE_BRANCH=<< pipeline.parameters.ARANGODB_ENTERPRISE_BRANCH >>
              if ["<< pipeline.parameters.ARANGODB_ENTERPRISE_BRANCH >>" == ""]; then
                set +e
                git ls-remote --exit-code --heads git@github.com:arangodb/enterprise.git << pipeline.parameters.ARANGODB_MAIN_BRANCH >>
                if [ "$?" == "0" ] ; then
                  ENTERPRISE_BRANCH=<< pipeline.parameters.ARANGODB_MAIN_BRANCH >>
                else
                  ENTERPRISE_BRANCH=devel
                fi
                set -e
              fi
              echo "Using enterprise branch $ENTERPRISE_BRANCH"
              git clone --depth 1 git@github.com:arangodb/enterprise.git --branch "$ENTERPRISE_BRANCH" /root/project/enterprise
      - run:
          name: Print SCCache Settings
          command: sccache -s
      - run:
          name: Configure
          command: |
            cmake --preset enterprise-pr -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib

      - run:
          name: Build
          command: |
            cmake --build --preset enterprise-pr --parallel 8 --target arangodbtests arangod arangosh arangoimport arangoexport arangodump arangorestore arangobench fuertetest arangobackup
      - run:
          name: Size leaderboard
          command: |
            ls -Ssha build/bin/*.a
      - run:
          name: Cleanup build directory
          command: |
            find build/ -iname *.a -delete || true
            find build/ -iname *.o -delete || true
      - run:
          name: SCCache Statistics
          command: sccache -s
      - run:
          name: Create archive of compiled instance
          command: tar -czf install.tar.gz build/ scripts/ js/ etc/ utils/ enterprise/js
      - persist_to_workspace:
          root: .
          paths:
            - .

  create-image:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true 
    resource_class: medium
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Create docker image from install.tar.gz and save it
          command: |
            cp install.tar.gz workspace/docs-hugo/toolchain/scripts
            cd workspace/docs-hugo/toolchain/scripts
            image_name=$(echo ${CIRCLE_BRANCH##*/})
            docker build -t $image_name:<< pipeline.id >> --target arangodb-tar-starter -f tar-to-docker.Dockerfile .
            mkdir /tmp/artifacts
            docker save $image_name:<< pipeline.id >> > /tmp/artifacts/$image_name:<< pipeline.id >>.tar.gz

      - store_artifacts:
          path: /tmp/artifacts



workflows:
  plain:
    when: { equal: [ plain-build, << pipeline.parameters.WORKFLOW >> ] }
    jobs:
      - checkout:
          name: cloneNewRepo
          repository: git@github.com:arangodb/docs-hugo.git
          branch: << pipeline.parameters.ARANGODB_DOCS_NEW_BRANCH >>    
      - plain-build:
          requires:
            - cloneNewRepo
      - deploy:
          requires:
            - plain-build
      - show-deploy-preview:
          requires:
            - deploy
    
  generate:
    when: { equal: [ generate, << pipeline.parameters.WORKFLOW >> ] }
    jobs:
      - build-with-generated
      - deploy:
          requires:
            - build-with-generated
      - commit-generated:
          requires:
            - deploy
      - show-deploy-preview:
          requires:
            - deploy

  community-pr:
    when: { equal: [ compile, << pipeline.parameters.WORKFLOW >> ] }
    jobs:
      - compile-linux
      - checkout:
          name: cloneNewRepo
          repository: git@github.com:arangodb/docs-hugo.git
          branch: main
          requires:
            - compile-linux
      - create-image:
          requires:
            - cloneNewRepo