version: 2.1

parameters:
  workflow:
    type: enum
    enum: [no-op, plain-build, generate, compile, generate-scheduled]
    default: no-op

  generators:
    type: string
    default: ""

  version:
    type: string
    default: ""

  arangodb-branch:
    type: string
    default: ""

  arangodb-branch-2:
    type: string
    default: ""

  arangodb-branch-3:
    type: string
    default: ""

  commit-generated:
    type: boolean
    default: false

  create-pr:
    type: boolean
    default: false

jobs:
  plain-build: 
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - run: 
          name: Clone docs repo
          command: |
            git clone --depth 1 git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH

      - run:
          name: Build site
          command: |
            curl -L https://github.com/gohugoio/hugo/releases/download/v0.112.5/hugo_0.112.5_linux-amd64.deb -o hugo.deb
            sudo apt install -y ./hugo.deb
            export HUGO_ENV=prod
            export HUGO_URL=https://deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"--docs-hugo.netlify.app
            cd docs-hugo/site && hugo -e $HUGO_ENV -b $HUGO_URL --minify
            
      - persist_to_workspace:
          root: .
          paths:
            - docs-hugo/site/public

  clone-arangodb-branches:
    parameters:
      arangodb-branch:
        type: string
        default: ""
      arangodb-branch-2:
        type: string
        default: ""
      arangodb-branch-3:
        type: string
        default: ""  
    docker:
      - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl3.0.8
    resource_class: xlarge
    environment:
      GIT_SSH_COMMAND: ssh
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
      - run:
          name: Validate parameters
          command: |
            if [ "<< parameters.arangodb-branch >>" == "" ] && [ "<< parameters.arangodb-branch-2 >>" == "" ] && [ "<< parameters.arangodb-branch-3 >>" == "" ]; then
              circleci-agent step halt
              exit 0
            fi

      - run:
          name: Download circleci utils script from docs-hugo repo
          command: |
            curl https://raw.githubusercontent.com/arangodb/docs-hugo/main/.circleci/utils.sh > utils.sh

      - run:
          name: Clone arangodb branches
          command: |
            source utils.sh
            if [ "<< parameters.arangodb-branch >>" != "" ] ; then
              clone-branch << parameters.arangodb-branch >>
            fi
            if [ "<< parameters.arangodb-branch-2 >>" != "" ] ; then
              clone-branch << parameters.arangodb-branch-2 >>
            fi
            if [ "<< parameters.arangodb-branch-3 >>" != "" ] ; then
              clone-branch << parameters.arangodb-branch-3 >>
            fi

            rm utils.sh

      - persist_to_workspace:
          root: .
          paths:
            - .


  build-with-generated:
    parameters:
      arangodb-branch:
        type: string
        default: ""
      arangodb-branch-2:
        type: string
        default: ""
      arangodb-branch-3:
        type: string
        default: ""  
      generators:
        type: string
        default: examples
      commit-generated:
        type: boolean
        default: false
      create-pr:
        type: boolean
        default: false
    machine:
      image: ubuntu-2004:current
    resource_class: large
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - attach_workspace:
          at: .
      
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
      - run: git clone --depth 1 git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH

      
      - run:
          name: Set environment variables and launch toolchain
          command: |
            source docs-hugo/.circleci/utils.sh
            export HUGO_URL=https://deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"--docs-hugo.netlify.app
            export DOCKER_ENV=examples
            export GENERATORS='<< parameters.generators >>'
            
            if [ "<< parameters.arangodb-branch >>" != "" ] ; then
              pull-branch-image << parameters.arangodb-branch >>
              generate_setup-environment-var-branch << parameters.arangodb-branch >> ""
            fi
            if [ "<< parameters.arangodb-branch-2 >>" != "" ] ; then
              pull-branch-image << parameters.arangodb-branch-2 >>
              generate_setup-environment-var-branch << parameters.arangodb-branch-2 >> "_2"
            fi
            if [ "<< parameters.arangodb-branch-3 >>" != "" ] ; then
              pull-branch-image << parameters.arangodb-branch-3 >>
              generate_setup-environment-var-branch << parameters.arangodb-branch-3 >> "_3"
            fi
            cd docs-hugo/toolchain/docker && docker compose up

      - run:
          name: Commit generated files
          command: |
            if [ "<< parameters.commit-generated >>" = true ] ; then
              if [ "<< parameters.create-pr >>" = true ]; then
                cd docs-hugo/
                git checkout -b scheduled-content-generate
              fi

              cd /home/circleci/project/docs-hugo/site
              git config user.email "daniele@arangodb.com"
              git config user.name "CircleCI Job"
              git add data/
              git commit --allow-empty -m "Automatic commit of generated files from CircleCI"

              if [ "<< parameters.create-pr >>" = true ]; then
                git push -u origin scheduled-content-generate
                curl -X POST https://candid-daffodil-f96315.netlify.app/.netlify/functions/circleci --header 'docs-webhook-event: scheduled-create-pr'
              else
                git push
              fi
            fi
      
      - persist_to_workspace:
          root: .
          paths:
            - docs-hugo/site/public
            - docs-hugo/site/data

 

  deploy:
    docker:
      - image: cimg/node:19.7.0
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install netlify-cli
          command: sudo npm install -g --silent netlify-cli

      - run:
          name: Deploy to netlify
          command: netlify deploy --dir=docs-hugo/site/public --site $NETLIFY_SITE_ID --auth $NETLIFY_ACCESS_TOKEN --alias deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"


  compile-linux:
    parameters:
      arangodb-branch:
        type: string
        default: ""
      version:
        type: string
        default: ""
    docker:
      - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl3.0.8
    resource_class: xlarge
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - setup_remote_docker:
          version: 20.10.14
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
      - run:
          name: Check Branch Image already exists
          command: |
            if [ "<< parameters.arangodb-branch >>" == "" ] || [[ "<< parameters.arangodb-branch >>" == *"arangodb/enterprise"* ]]; then
              circleci-agent step halt
              exit 0
            fi

            ARANGODB_BRANCH=<< parameters.arangodb-branch >>
            VERSION=<< parameters.version >>
            if [ "$VERSION" == "" ]; then
              ARANGODB_BRANCH=$(echo << parameters.arangodb-branch >> | cut -d, -f2)
              VERSION=$(echo << parameters.arangodb-branch >> | cut -d, -f3)
            fi

            image_name=$(echo $ARANGODB_BRANCH | cut -d/ -f2)
            apk add skopeo
            latestRemoteHash=$(git ls-remote https://github.com/arangodb/arangodb.git $ARANGODB_BRANCH | awk '{print $1}' | cut -c1-9)
            remoteImageTag="arangodb/docs-hugo:$image_name-$VERSION-$latestRemoteHash"
            set +e
            skopeo inspect docker://$remoteImageTag 
            if [ "$?" != "0" ]; then
              exit 0
            fi 
            circleci-agent step halt
      - run:
          name: Checkout ArangoDB
          command: |
            ARANGODB_BRANCH=<< parameters.arangodb-branch >>
            VERSION=<< parameters.version >>
            if [ "$VERSION" == "" ]; then
              ARANGODB_BRANCH=$(echo << parameters.arangodb-branch >> | cut -d, -f2)
              VERSION=$(echo << parameters.arangodb-branch >> | cut -d, -f3)
            fi
            git clone --depth 1 https://github.com/arangodb/arangodb.git --branch $ARANGODB_BRANCH /root/project
      - run:
          name: Checkout Enterprise
          command: |
              ARANGODB_BRANCH=<< parameters.arangodb-branch >>
              VERSION=<< parameters.version >>
              if [ "$VERSION" == "" ]; then
                ARANGODB_BRANCH=$(echo << parameters.arangodb-branch >> | cut -d, -f2)
                VERSION=$(echo << parameters.arangodb-branch >> | cut -d, -f3)
              fi
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              ENTERPRISE_BRANCH=$ARANGODB_BRANCH
              set +e
              git ls-remote --exit-code --heads git@github.com:arangodb/enterprise.git $ARANGODB_BRANCH
              if [ "$?" == "0" ] ; then
                ENTERPRISE_BRANCH=$ARANGODB_BRANCH
              else
                ENTERPRISE_BRANCH=devel
              fi
              set -e
              echo "Using enterprise branch $ENTERPRISE_BRANCH"
              git clone --depth 1 git@github.com:arangodb/enterprise.git --branch "$ENTERPRISE_BRANCH" /root/project/enterprise
      - run:
          name: Print SCCache Settings
          command: sccache -s
      - run:
          name: Configure
          command: |
            cmake --preset enterprise-pr -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib

      - run:
          name: Build
          command: |
            cmake --build --preset enterprise-pr --parallel 8 --target arangodbtests arangod arangosh arangoimport arangoexport arangodump arangorestore arangobench fuertetest
      - run:
          name: Size leaderboard
          command: |
            ls -Ssha build/bin/*.a
      - run:
          name: Cleanup build directory
          command: |
            find build/ -iname *.a -delete || true
            find build/ -iname *.o -delete || true
      - run:
          name: SCCache Statistics
          command: sccache -s
      - run:
          name: Create archive of compiled instance
          command: tar -czf install.tar.gz build/ scripts/ js/ etc/ utils/ enterprise/
      - run:
          name: Create docker image
          command: |
            ARANGODB_BRANCH=<< parameters.arangodb-branch >>
            VERSION=<< parameters.version >>
            if [ "$VERSION" == "" ]; then
              ARANGODB_BRANCH=$(echo << parameters.arangodb-branch >> | cut -d, -f2)
              VERSION=$(echo << parameters.arangodb-branch >> | cut -d, -f3)
            fi
            git clone --depth 1 git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH
            apk add docker-cli
            main_hash=$(awk 'END{print}' .git/logs/HEAD | awk '{print $2}' | cut -c1-9)
            image_name=$(echo $ARANGODB_BRANCH | cut -d/ -f2)

            mv install.tar.gz docs-hugo/toolchain/scripts/compile
            cd docs-hugo/toolchain/scripts/compile

            docker build -t arangodb/docs-hugo:$image_name-$VERSION-$main_hash --target arangodb-tar-starter -f tar-to-docker.Dockerfile .
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker push arangodb/docs-hugo:$image_name-$VERSION-$main_hash

  show-deploy-preview:
    docker:
      - image: cimg/node:19.7.0
    resource_class: small
    steps:
      - run:
          name: Update Github check status message
          when: on_success
          command: |
            API=https://api.github.com
            USER=$CIRCLE_PROJECT_USERNAME
            REPO=$CIRCLE_PROJECT_REPONAME
            SHA=$CIRCLE_SHA1
            AUTH=dandimeo:$GITHUB_PAT
            URL=$API/repos/$USER/$REPO/statuses/$SHA
            DESCRIPTION=https://deploy-preview-${CIRCLE_PULL_REQUEST##*/}--docs-hugo.netlify.app
            echo "$DESCRIPTION"
            # Compose the body.
            BODY='
              {
                "state": "success",
                "target_url": "'"$DESCRIPTION"'",
                "description": "'"$DESCRIPTION"'",
                "context": "ci/circleci: deploy"
              }
            '
            # Post the status (use echo-pipe not \<<< for greater shell compat).
            echo $BODY | curl -u $AUTH -XPOST -d@- $URL



workflows:
  plain:
    when: { equal: [ plain-build, << pipeline.parameters.workflow >> ] }
    jobs:
      - plain-build
      - deploy:
          requires:
            - plain-build
      - show-deploy-preview:
          requires:
            - deploy
    
  generate:
    when: { equal: [ generate, << pipeline.parameters.workflow >> ] }
    jobs:
      - approve-workflow:
          type: approval
      - compile-linux:
          context:
            - sccache-aws-bucket
          name: compile-1
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          version: ""
          requires:
            - approve-workflow
      - compile-linux:
          context:
            - sccache-aws-bucket
          name: compile-2
          arangodb-branch: << pipeline.parameters.arangodb-branch-2 >>
          version: ""
          requires:
            - approve-workflow
      - compile-linux:
          context:
            - sccache-aws-bucket
          name: compile-3
          arangodb-branch: << pipeline.parameters.arangodb-branch-3 >>
          version: ""
          requires:
            - approve-workflow
      - clone-arangodb-branches:
          name: clone-arangodb-branches-1
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          arangodb-branch-2: ""
          arangodb-branch-3: ""
          requires:
            - compile-1
      - clone-arangodb-branches:
          name: clone-arangodb-branches-2
          arangodb-branch: ""
          arangodb-branch-2: << pipeline.parameters.arangodb-branch-2 >>
          arangodb-branch-3: ""
          requires:
            - compile-2
      - clone-arangodb-branches:
          name: clone-arangodb-branches-3
          arangodb-branch: ""
          arangodb-branch-2: ""
          arangodb-branch-3: << pipeline.parameters.arangodb-branch-3 >>
          requires:
            - compile-3

      - build-with-generated:
          name: build-with-generated
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          arangodb-branch-2: << pipeline.parameters.arangodb-branch-2 >>
          arangodb-branch-3: << pipeline.parameters.arangodb-branch-3 >>
          generators: << pipeline.parameters.generators >>
          commit-generated: << pipeline.parameters.commit-generated >>
          create-pr: false
          requires:
            - clone-arangodb-branches-1
            - clone-arangodb-branches-2
            - clone-arangodb-branches-3
      - deploy:
          requires:
            - build-with-generated
      - show-deploy-preview:
          requires:
            - deploy
  
  generate-scheduled:
    when: { equal: [ generate-scheduled, << pipeline.parameters.workflow >> ] }
    jobs:
      - clone-arangodb-branches:
          name: clone-arangodb-branches
          arangodb-branch: "stable,arangodb/enterprise-preview:3.10-nightly,3.10,"
          arangodb-branch-2: ""
          arangodb-branch-3: ""
      - clone-arangodb-branches:
          name: clone-arangodb-branches-2
          arangodb-branch: ""
          arangodb-branch-2: "stable,arangodb/enterprise-preview:3.11-nightly,3.11,"
          arangodb-branch-3: ""
      - build-with-generated:
          name: build-with-generated
          arangodb-branch: "stable,arangodb/enterprise-preview:3.10-nightly,3.10,"
          arangodb-branch-2: "stable,arangodb/enterprise-preview:3.11-nightly,3.11,"
          arangodb-branch-3: ""
          generators: "metrics error-codes options"
          commit-generated: true
          create-pr: true
          requires:
            - clone-arangodb-branches
            - clone-arangodb-branches-2
      

  community-pr:
    when: { equal: [ compile, << pipeline.parameters.workflow >> ] }
    jobs:
      - compile-linux:
          name: "compile"
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          version: << pipeline.parameters.version >>
          context:
            - sccache-aws-bucket
