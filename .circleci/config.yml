version: 2.1

parameters:
  workflow:
    type: enum
    enum: [no-op, plain-build, generate, compile]
    default: no-op

  generators:
    type: string
    default: ""

  version:
    type: string
    default: "3.10"

  arangodb-branch:
    type: string
    default: "devel"

  arangodb-branch-2:
    type: string
    default: ""

  arangodb-branch-3:
    type: string
    default: ""

  commit-generated:
    type: boolean
    default: false

jobs:
  plain-build: 
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true 
    resource_class: medium
    steps:
      - run: 
          name: Clone docs repo
          command: |
            git clone --depth 1 git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH


      - run:
          name: Build site
          command: |
            export HUGO_ENV=prod
            export HUGO_URL=https://deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"--docs-hugo.netlify.app
            cd docs-hugo/toolchain/docker && docker compose -f docker-compose.plain-build.yml up --build
            
      - persist_to_workspace:
          root: .
          paths:
            - workspace/docs-hugo

  build-with-generated:
    parameters:
      arangodb-branch:
        type: string
        default: ""
      arangodb-branch-2:
        type: string
        default: ""
      arangodb-branch-3:
        type: string
        default: ""  
      generators:
        type: string
        default: examples
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true 
    resource_class: large
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts

      - run:
          name: Clone docs-hugo repo
          command: |
            git clone --depth 1 git@github.com:arangodb/docs-hugo.git --branch $CIRCLE_BRANCH

      - run:
          name: Clone arangodb branches
          command: |
            source docs-hugo/.circleci/utils.sh
            if [ "<< parameters.arangodb-branch >>" != "" ] ; then
              generate_setup-arangodb-branches << parameters.arangodb-branch >>
            fi
            if [ "<< parameters.arangodb-branch-2 >>" != "" ] ; then
              generate_setup-arangodb-branches << parameters.arangodb-branch-2 >>
            fi
            if [ "<< parameters.arangodb-branch-3 >>" != "" ] ; then
              generate_setup-arangodb-branches << parameters.arangodb-branch-3 >>
            fi

      - run:
          name: Set environment variables and launch toolchain
          command: |
            source docs-hugo/.circleci/utils.sh
            export HUGO_URL=https://deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"--docs-hugo.netlify.app
            export DOCKER_ENV=examples
            export GENERATORS=<< parameters.generators >>
            
            if [ "<< parameters.arangodb-branch >>" != "" ] ; then
              generate_setup-environment-var-branch << parameters.arangodb-branch >>
            fi
            if [ "<< parameters.arangodb-branch-2 >>" != "" ] ; then
              generate_setup-environment-var-branch << parameters.arangodb-branch-2 >>
            fi
            if [ "<< parameters.arangodb-branch-3 >>" != "" ] ; then
              generate_setup-environment-var-branch << parameters.arangodb-branch-3 >>
            fi
            cd docs-hugo/toolchain/docker && docker compose up

      - run:
          name: Commit generated files
          command: |
            if [ "<< parameters.commit-generated >>" = true ] ; then
                cd /home/circleci/project/docs-hugo/site
                git config user.email "daniele@arangodb.com"
                git config user.name "CircleCI Job"
                git commit --allow-empty -m "[ci skip] Automatic commit of generated files from CircleCI" data/
                git push 
            fi
      
      - persist_to_workspace:
          root: .
          paths:
            - docs-hugo/site/public
            - docs-hugo/site/data

 

  deploy:
    docker:
      - image: cimg/node:19.7.0
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install netlify-cli
          command: sudo npm install -g --silent netlify-cli

      - run:
          name: Deploy to netlify
          command: netlify deploy --dir=docs-hugo/site/public --site $NETLIFY_SITE_ID --auth $NETLIFY_ACCESS_TOKEN --alias deploy-preview-"${CIRCLE_PULL_REQUEST##*/}"


      
      

  compile-linux:
    parameters:
      arangodb-branch:
        type: string
        default: ""
      version:
        type: string
        default: ""
    docker:
      - image: arangodb/build-alpine-x86_64:3.16-gcc11.2-openssl3.0.8
    resource_class: xlarge
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7a:1d:7f:0a:70:eb:2b:7d:25:10:9b:e8:dc:04:53:9a"
            - "28:4f:0b:b7:71:cd:39:ab:c0:33:65:4f:da:6a:cc:8e"
            - "bc:4d:f3:df:53:ad:22:d8:60:5d:10:d8:fd:74:d2:cd"
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts && cat ~/.ssh/known_hosts
      - run:
          name: Check Branch Image already exists
          command: |
            if [ "<< parameters.arangodb-branch >>" == "" ]; then
              circleci-agent step halt
            fi

            ARANGODB_BRANCH=<< parameters.arangodb-branch >>
            VERSION=<< parameters.version >>
            if [ "$VERSION" == "" ]; then
              ARANGODB_BRANCH=$(echo << parameters.arangodb-branch >> | cut -d, -f2)
              VERSION=$(echo << parameters.arangodb-branch >> | cut -d, -f3)
            fi

            image_name=$(echo $ARANGODB_BRANCH | cut -d/ -f2)

            latestRemoteHash=$(git ls-remote https://github.com/arangodb/arangodb.git $ARANGODB_BRANCH | awk '{print $1}' | cut -c1-9)
            remoteImageTag="arangodb/docs-hugo:$image_name-$VERSION-$latestRemoteHash"

            remoteImageExists=$(docker manifest inspect $remoteImageTag)
            if [ "$?" == "0" ]; then
              circleci-agent step halt
            fi 
      - run:
          name: Checkout ArangoDB
          command: |
            git clone --depth 1 https://github.com/arangodb/arangodb.git --branch << parameters.arangodb-branch >> /root/project
      - run:
          name: Checkout Enterprise
          command: |
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              ENTERPRISE_BRANCH=<< parameters.arangodb-branch >>
              set +e
              git ls-remote --exit-code --heads git@github.com:arangodb/enterprise.git << parameters.arangodb-branch >>
              if [ "$?" == "0" ] ; then
                ENTERPRISE_BRANCH=<< parameters.arangodb-branch >>
              else
                ENTERPRISE_BRANCH=devel
              fi
              set -e
              echo "Using enterprise branch $ENTERPRISE_BRANCH"
              git clone --depth 1 git@github.com:arangodb/enterprise.git --branch "$ENTERPRISE_BRANCH" /root/project/enterprise
      - run:
          name: Print SCCache Settings
          command: sccache -s
      - run:
          name: Configure
          command: |
            cmake --preset community-pr -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_LIBRARY_PATH=$OPENSSL_ROOT_DIR/lib

      - run:
          name: Build
          command: |
            cmake --build --preset community-pr --parallel 8 --target arangodbtests arangod arangosh arangoimport arangoexport arangodump arangorestore arangobench fuertetest
      - run:
          name: Size leaderboard
          command: |
            ls -Ssha build/bin/*.a
      - run:
          name: Cleanup build directory
          command: |
            find build/ -iname *.a -delete || true
            find build/ -iname *.o -delete || true
      - run:
          name: SCCache Statistics
          command: sccache -s
      - run:
          name: Create archive of compiled instance
          command: tar -czf install.tar.gz build/ scripts/ js/ etc/ utils/
      - persist_to_workspace:
          root: .
          paths:
            - .

  create-image:
    parameters:
      arangodb-branch:
        type: string
        default: ""
      version:
        type: string
        default: ""
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true 
    resource_class: medium
    environment:
      GIT_SSH_COMMAND: ssh
      SCCACHE_ERROR_LOG: /tmp/sccache.log
      SCCACHE_LOG: info,sccache::cache=debug,sccache::compiler::compiler=debug
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Create docker image from install.tar.gz and save it
          command: |
            if [ "<< parameters.arangodb-branch >>" == "" ]; then
              circleci-agent step halt
            fi

            ARANGODB_BRANCH=<< parameters.arangodb-branch >>
            VERSION=<< parameters.version >>
            if [ "$VERSION" == "" ]; then
              ARANGODB_BRANCH=$(echo << parameters.arangodb-branch >> | cut -d, -f2)
              VERSION=$(echo << parameters.arangodb-branch >> | cut -d, -f3)
            fi

            main_hash=$(awk 'END{print}' .git/logs/HEAD | awk '{print $2}' | cut -c1-9)
            image_name=$(echo $ARANGODB_BRANCH | cut -d/ -f2)
            mkdir /tmp/artifacts
            cp install.tar.gz docs-hugo/toolchain/scripts/compile
            cd docs-hugo/toolchain/scripts/compile
            docker build -t arangodb/docs-hugo:$image_name-$VERSION-$main_hash --target arangodb-tar-starter -f tar-to-docker.Dockerfile .
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
            docker push arangodb/docs-hugo:$image_name-$VERSION-$main_hash

workflows:
  plain:
    when: { equal: [ plain-build, << pipeline.parameters.workflow >> ] }
    jobs:
      - plain-build
      - deploy:
          requires:
            - plain-build
    
  generate:
    when: { equal: [ generate, << pipeline.parameters.workflow >> ] }
    jobs:
      - compile-linux:
          name: compile-1
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          version: ""
      - compile-linux:
          name: compile-2
          arangodb-branch: << pipeline.parameters.arangodb-branch-2 >>
          version: ""
      - compile-linux:
          name: compile-3
          arangodb-branch: << pipeline.parameters.arangodb-branch-3 >>
          version: ""
      - build-with-generated:
          name: build-with-generated
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          arangodb-branch-2: << pipeline.parameters.arangodb-branch-2 >>
          arangodb-branch-3: << pipeline.parameters.arangodb-branch-3 >>
          generators: << pipeline.parameters.generators >>
          commit-generated: << pipeline.parameters.commit-generated >>
          requires:
            - compile-1
            - compile-2
            - compile-3
      - deploy:
          requires:
            - build-with-generated

  community-pr:
    when: { equal: [ compile, << pipeline.parameters.workflow >> ] }
    jobs:
      - compile-linux:
          name: "compile"
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          version: << pipeline.parameters.version >>

      - create-image:
          name: "create-image"
          arangodb-branch: << pipeline.parameters.arangodb-branch >>
          version: << pipeline.parameters.version >>
          requires:
            - compile
